package {{ .PackageName }}

import (
	"context"

	{{- if .Imports }}
	{{- range .Imports }}
		"{{ . }}"
	{{- end }}
	{{- end }}

	"github.com/zeromicro/go-zero/core/logx"
)

type {{ .LogicName }}Logic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

// {{ .LogicName }}
func New{{ .LogicName }}Logic(ctx context.Context, svcCtx *svc.ServiceContext) *{{ .LogicName }}Logic {
	return &{{ .LogicName }}Logic{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *{{ .LogicName }}Logic) {{ .LogicName }}(req *types.{{ .RequestType }}) (resp *{{ .ResponseType }}, err error) {
	{{ if .GetByIdHook }}
		l.{{ .LogicName }}InsertBefore(req)
	{{ end }}
	// Fetch the {{ .ModelStruct }} from the database
	var {{ .ModelInstanceName }} {{.ModelPkgName}}.{{ .ModelStruct }}
	if err := l.svcCtx.DB.Table({{ .ModelPkgName }}.{{ .ModelStruct }}{}.TableName()).Where("id = ?", req.{{ .IdFieldName }}).First(&{{ .ModelInstanceName }}).Error; err != nil {
		l.Logger.Error("failed to get record from database", logx.Field("error", err))
		return nil, err
	}


	// Copy fields from {{ .ModelStruct }} to {{ .ResponseType }}
	resp = &{{ .ResponseType }}{}
	err = {{ .CopyPkgName }}.CopyModels{{ .ModelStruct }}ToTypes{{ .ModelStruct }}(&resp.Data, &{{ .ModelInstanceName }})
	if err != nil {
		l.Logger.Error("failed to copy {{ .ModelStruct }} to {{ .ResponseType }}", logx.Field("error", err))
		return nil, err
	}

	{{ if .GetByIdHook }}
		l.{{ .LogicName }}InsertAfter(req, resp)
	{{ end }}
	return resp, nil
}
