
package {{ .PackageName }}

import (
	"context"

	{{- if .Imports }}
	{{- range .Imports }}
		"{{ . }}"
	{{- end }}
	{{- end }}

	"github.com/zeromicro/go-zero/core/logx"
	{{- range .Fields }}
	{{- if hasPrefix .FieldType "[]" }}
	"github.com/lib/pq"
	{{- break }}
	{{- end }}
	{{- end }}
)

type {{ .LogicName }}Logic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

// {{ .LogicName }}
func New{{ .LogicName }}Logic(ctx context.Context, svcCtx *svc.ServiceContext) *{{ .LogicName }}Logic {
	return &{{ .LogicName }}Logic{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *{{ .LogicName }}Logic) {{ .LogicName }}(req *types.{{ .RequestType }}) (resp *{{ .ResponseType }}, err error) {
	// Convert the request struct to a map
	conv := structs.New(req)
	conv.TagName = "tomap"
	m := conv.Map()

	{{- range .Fields }}
	{{- if hasPrefix .FieldType "[]" }}
	if v, ok := m["{{.SnakeCaseName}}"]; ok {
		m["{{.SnakeCaseName}}"] = pq.Array(v)
	}
	{{- end }}
	{{- end }}

	// Remove the "id" field from the map
	delete(m, "id")
	// Update the {{ .ModelStruct }} in the database
	if err := l.svcCtx.DB.Table({{ .ModelPkgName }}.{{ .ModelStruct }}{}.TableName()).Where("id = ?", req.Id).Updates(m).Error; err != nil {
		l.Logger.Error("failed to update record", logx.Field("error", err))
		return nil, err
	}


	// Prepare the response
	return &{{ .ResponseType }}{}, nil
}
