package {{ .PackageName }}

import (
	"context"

	{{- if .Imports }}
	{{- range .Imports }}
		"{{ . }}"
	{{- end }}
	{{- end }}

	"github.com/zeromicro/go-zero/core/logx"
)

type {{ .LogicName }}Logic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

// {{ .LogicName }}
func New{{ .LogicName }}Logic(ctx context.Context, svcCtx *svc.ServiceContext) *{{ .LogicName }}Logic {
	return &{{ .LogicName }}Logic{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *{{ .LogicName }}Logic) {{ .LogicName }}(req *{{ .RequestType }}) (resp *{{ .ResponseType }}, err error) {
	var items []{{.ModelPkgName}}.{{ .ModelStruct }}

	// Build the base query
	query := l.svcCtx.DB.Table({{ .ModelPkgName }}.{{ .ModelStruct }}{}.TableName())

	// Apply pagination
	if req.PageNum > 0 && req.PageSize > 0 {
		offset := (req.PageNum - 1) * req.PageSize
		query = query.Offset(offset).Limit(req.PageSize)
	}

	{{- range .Fields }}
	{{- if not (or (eq .FieldName "ID") (eq .FieldName "Id") (eq .FieldName "CreatedAt") (eq .FieldName "UpdatedAt") (eq .FieldName "DeletedAt")) }}

	{{- if (or (eq .FieldType "int") (eq .FieldType "int16") (eq .FieldType "int64") (eq .FieldType "float32") (eq .FieldType "float64"))}}
	if req.{{ .FieldName }} != 0 {
		query = query.Where("{{ .SnakeCaseName}} = ?", req.{{ .FieldName }})
	}
	{{- else if (or (eq .FieldType "string")) }}
	if len(req.{{ .FieldName }}) > 0 {
		query = query.Where("{{ .SnakeCaseName}} = ?", req.{{ .FieldName }})
	}
	{{- else if (or (eq .FieldType "[]string")) }}
	if len(req.{{ .FieldName }}) > 0 {
		query = query.Where("{{ .SnakeCaseName}} in (?)", req.{{ .FieldName }})
	}
	{{- end }}
	{{- end }}
	{{- end }}

	// Execute the query
	if err = query.Find(&items).Error; err != nil {
		return nil, err
	}

	// Get total count
	var total int64
	if err = query.Count(&total).Error; err != nil {
		return nil, err
	}

	// Initialize response
	resp = &{{ .ResponseType }}{
		Data: {{ .ResponseType }}Data{
			Items:  make([]types.{{ .ModelStruct }}, len(items)),
			Total: int(total),
		},
	}

	// Copy model data to response type
	for i, item := range items {
		if err = mycopy.CopyModels{{ .ModelStruct }}ToTypes{{ .ModelStruct }}(&resp.Data.Items[i], &item); err != nil {
			return nil, err
		}
	}

	return resp, nil
}
