package {{ .PackageName }}

import (
	"context"

	{{- if .Imports }}
	{{- range .Imports }}
		"{{ . }}"
	{{- end }}
	{{- end }}

	"github.com/zeromicro/go-zero/core/logx"
)

type {{ .LogicName }}Logic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

// {{ .LogicName }}
func New{{ .LogicName }}Logic(ctx context.Context, svcCtx *svc.ServiceContext) *{{ .LogicName }}Logic {
	return &{{ .LogicName }}Logic {
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *{{ .LogicName }}Logic) {{ .LogicName }}(req *types.{{ .RequestType }}) (resp *{{ .ResponseType }}, err error) {
	var {{ .ModelInstanceName }} {{.ModelPkgName}}.{{ .ModelStruct }}
	// Copy fields from Create{{ .ModelStruct }}Req to {{ .ModelStruct }}
	err = {{ .CopyPkgName }}.CopyCreate{{ .ModelStruct }}ReqTo{{ .ModelStruct }}(&{{ .ModelInstanceName }}, req)
	if err != nil {
		return nil, err
	}

	{{ if .CreateHook }}
		err, skip := l.{{ .LogicName }}InsertBefore(&{{ .ModelInstanceName }}, req)
		if err != nil {
			return nil, err
		}
		if skip {
			return &{{ .ResponseType }}{} , nil
		}
	{{ end }}
	// Save the {{ .ModelInstanceName }} to the database
	err = l.svcCtx.DB.Table({{ .ModelPkgName }}.{{ .ModelStruct }}{}.TableName()).Create(&{{ .ModelInstanceName }}).Error
	if err != nil {
		l.Logger.Error("failed to create record", logx.Field("error", err))
		return nil, err
	}

	// Prepare the response
	resp = &{{ .ResponseType }}{}
	resp.Data.Id = {{ if eq .IdFieldType "uuid" }}{{ .ModelInstanceName }}.Id.String(){{ else }}{{ .ModelInstanceName }}.Id{{ end }}

	{{ if .CreateHook }}
		err = l.{{ .LogicName }}InsertAfter(&{{.ModelInstanceName}}, req, resp)
		if err != nil {
			return nil, err
		}
	{{ end }}

	return resp, nil
}
