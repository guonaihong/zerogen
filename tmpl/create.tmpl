package {{ .PackageName }}

import (
	"context"

	"{{ .ServiceImport }}"
	"{{ .ModelImport }}"
	"{{ .TypeImport }}"

	"github.com/zeromicro/go-zero/core/logx"
)

type {{ .LogicName }}Logic struct {
	logx.Logger
	ctx    context.Context
	svcCtx *svc.ServiceContext
}

// {{ .LogicDescription }}
func New{{ .LogicName }}Logic(ctx context.Context, svcCtx *svc.ServiceContext) *{{ .LogicName }} {
	return &{{ .LogicName }}{
		Logger: logx.WithContext(ctx),
		ctx:    ctx,
		svcCtx: svcCtx,
	}
}

func (l *{{ .LogicName }}Logic) {{ .LogicName }}(req *{{ .RequestType }}) (resp *{{ .ResponseType }}, err error) {
	// 1. 创建新的模型实例
	var {{ .ModelInstanceName }} {{ .ModelStruct }}
	CopyCreate{{ .ModelStruct }}ReqTo{{ .ModelStruct }}(req, &{{ .ModelInstanceName }})

	// 2. 插入数据库
	err = l.svcCtx.DB.Model(&{{ .ModelStruct }}{}).Create(&{{ .ModelInstanceName }}).Error
	if err != nil {
		l.Logger.Error("{{ .ErrorMessage }}", logx.Field("error", err))
		return &{{ .ResponseType }}{}, err
	}

	// 3. 返回成功响应
	return &{{ .ResponseType }}{}, nil
}
