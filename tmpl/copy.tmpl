package {{ .PackageName }}

{{- if .Imports }}
import (
{{- range .Imports }}
    "{{ . }}"
{{- end }}
)
{{- end }}

{{- range .Structs }}

// CopyCreate{{ .StructName }}ReqTo{{ .StructName }} copies fields from Create{{ .StructName }}Req to {{ .StructName }}.
func CopyCreate{{ .StructName }}ReqTo{{ .StructName }}(dest *models.{{ .StructName }}, src *types.Create{{ .StructName }}Req) (err error) {
	{{- range .Fields }}
	{{- if eq .FieldName "Id" }}
		{{- if eq .FieldType "uuid.UUID" }}
		// Generate new UUID for Id
		dest.Id = uuid.New()
		{{- end }}
	{{- else if not (or (eq .FieldName "CreatedAt") (eq .FieldName "UpdatedAt") (eq .FieldName "DeletedAt")) }}
		{{- if .CopyGoZeroToGorm }}
		// Custom conversion for {{ .FieldName }}
		{{- if eq .CopyGoZeroToGorm "time.Parse" }}
		// Use time.Parse with time.RFC3339
		if src.{{ .FieldName }} != "" {
			dest.{{ .FieldName }}, err = time.Parse(time.RFC3339, src.{{ .FieldName }})
			if err != nil {
				return err
			}
		}
		{{- else if eq .CopyGoZeroToGorm "uuid.Parse" }}
		// Use uuid.Parse
		if src.{{ .FieldName }} != "" {
			dest.{{ .FieldName }}, err = uuid.Parse(src.{{ .FieldName }})
			if err != nil {
				return err
			}
		}
		{{- else if (hasPrefix .CopyGoZeroToGorm ".") }}
		// Operate on src.{{ .FieldName }} and assign the transformed value to dest.{{ .FieldName }}
		dest.{{ .FieldName }}, err = (src.{{ .FieldName }}{{ .CopyGoZeroToGorm }})
		{{- else }}
		// Call the package-level function {{ .CopyGoZeroToGorm }}
		dest.{{ .FieldName }}, err = {{ .CopyGoZeroToGorm }}(src.{{ .FieldName }})
		if err != nil {
			return err
		}
		{{- end }}
		{{- else if and (eq .FieldType "timestamp") (eq .ReqFieldType "string") }}
		// Convert string to timestamp (time.Time) for {{ .FieldName }}
		if src.{{ .FieldName }} != "" {
			dest.{{ .FieldName }}, _ = time.Parse(time.RFC3339, src.{{ .FieldName }})
		}
		{{- else }}
		dest.{{ .FieldName }} = src.{{ .FieldName }}
		{{- end }}
	{{- end }}
	{{- end }}
	return nil
}

// CopyModels{{ .StructName }}ToTypes{{ .StructName }} copies fields from models.{{ .StructName }} to types.{{ .StructName }}.
func CopyModels{{ .StructName }}ToTypes{{ .StructName }}(dest *types.{{ .StructName }}, src *models.{{ .StructName }}) (err error) {
	{{- range .Fields }}
	{{- if not (or (eq .FieldName "DeletedAt")) }}
	{{- if .CopyGormToGoZero }}
		// Custom conversion for {{ .FieldName }}
		{{- if eq .CopyGormToGoZero "time.Format" }}
		// Use time.Format with time.RFC3339
		if !src.{{ .FieldName }}.IsZero() {
			dest.{{ .FieldName }} = src.{{ .FieldName }}.Format(time.RFC3339)
		}
		{{- else if (hasPrefix .CopyGormToGoZero ".") }}
		// Operate on src.{{ .FieldName }} and assign the transformed value to dest.{{ .FieldName }}
		dest.{{ .FieldName }} = src.{{ .FieldName }}{{ .CopyGormToGoZero }}
		{{- else }}
		// Call the package-level function {{ .CopyGormToGoZero }}
		dest.{{ .FieldName }}, err = {{ .CopyGormToGoZero }}(src.{{ .FieldName }})
		if err != nil {
			return err
		}
		{{- end }}
	{{- else if (eq .FieldType "timestamp") }}
		// Convert timestamp (time.Time) to string for {{ .FieldName }}
		if !src.{{ .FieldName }}.IsZero() {
			dest.{{ .FieldName }} = src.{{ .FieldName }}.Format(time.RFC3339)
		}
	{{- else }}
		dest.{{ .FieldName }} = src.{{ .FieldName }}
	{{- end }}
	{{- end }}
	{{- end }}
	return nil
}
{{- end }}
